# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Riexoxscpqq-2aBIO9eiJpnld-ek0PWa
"""

#Теория 
import matplotlib.pyplot as plt
celsius = [[-67.0], [-34.0], [0], [34.0], [54.0], [67.0], [100]]
fahrenheit = [[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]]
plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, fahrenheit, label="входные значения", color="green", marker="$f$");
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()
for c,f in zip(celsius, fahrenheit):
    print(f'цельсия{c}= фаренгейт {f}')
                          #часть 2
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(celsius, fahrenheit)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
celsius_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test= lr.predict(celsius_test)
fahrenheit_test
for c,f in zip(celsius_test, fahrenheit_test):
    print(f'2.0 цельсия {c} фаренгейта{f}')
                           #часть 3
import numpy as np
x_range = np.arange(-70, 120)
y_range = x_range*1.8+32
plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(celsius, fahrenheit, label='входные данные', color='green')
plt.scatter(celsius_test, fahrenheit_test, label='предсказанное значение', color='blue')
plt.xlabel('цельсия')
plt.ylabel('фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

#Код первый 
kelvin = [[200], [220], [250], [280], [300]]
fahrenheit = [[-99.6], [-63.6], [-9.6], [44.3], [80.3]]
import matplotlib.pyplot as plt
plt.figure(figsize=(15,8), dpi=50)
plt.scatter(kelvin, fahrenheit, label='входные данные', color='blue', marker='$f$');
plt.xlabel('kelvin')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()
for c,f in zip(kelvin, fahrenheit):
  print(f'кельвин{c}= фаренгейт {f}')
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(kelvin, fahrenheit)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
kelvin_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test = lr.predict(kelvin_test)
fahrenheit_test
import numpy as np
x_range = np.arange(-70, 120)
y_range = (x_range-273)*9/5+32
plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(x_range, y_range, label='входные данные', color='blue')
plt.scatter(kelvin_test, fahrenheit_test, label='предсказанное значение', color='yellow')
plt.xlabel('Кельвин')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

"""Задание 2 (на ГИТ хаб) сделал"""

#Задание 3
import matplotlib.pyplot as plt
import numpy as np
#График 1 (Рейтинг цветов в России)
labels = ['Белый' , 'Чёрный','Красный' , 'Синий' , 'Другие цвета']
values = [19,13,3,8,57]
colors = ['white','black','red','blue','gray']
plt.pie(values,labels=labels,colors=colors)
plt.axis('equal')
plt.show()

#График 2 
index = np.arange(12)
values1 = [31,28,31,30,31,30,31,31,30,31,30,31]
plt.title('Дней в месяце')
plt.bar(index, values1, label='Дней')
plt.xticks(index,['Я','Ф','М','А','М','И','И','А','С','О','Н','Д'])
plt.legend(loc=2)
plt.show()

#График 3
index = np.arange(5)
values1 = [73,107,29,65,67]
plt.title('Ставка на скачках от всех участников')
plt.barh(index, values1, label='Сумма МЛН рублей')
plt.yticks(index,['Лошадь 1','Лошадь 2','Лошадь 3','Лошадь 4','Лошадь 5'])
plt.legend()
plt.show()

#Задание 4
import math
math.e
math.pi
math.nan
math.factorial(10)
math.gcd(10,75)

#задания сложного уровня 
#задание 2
import tensorflow as tf
image_data = tf.keras.datasets.fashion_mnist
from sys import platform
(train_images,train_labels),(test_images,test_labels) = image_data.load_data()
import matplotlib.pyplot as plt
plt.imshow(train_images[0])
#Данные должны быть предварительно обработаны перед обучением сети для этого масштабируйум эти значения в диапазоне от 0 до 1. Нужно поделить на 255
(train_images,train_labels),(test_images,test_labels) = image_data.load_data()
train_images = train_images / 255.0
test_images = test_images / 255.0
train_images[0]
#Загрузка набора данных возвращает четыре массива "train_images train_images test_images test_images"
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape =(28,28)),
    tf.keras.layers.Dense(128,activation="relu"),
    tf.keras.layers.Dense(10)
])
#tf.keras.Sequential Последовательная группировка линейного стека модулей
#tf.keras.layers является модулем; Dense and Flatten имеют параметры которые я нашел в интренете (._. ')

model.compile(optimizer="adam",
               loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
               metrics=["accuracy"]
)
#tf.keras.losses измеряет, насколько точна модель во время обучения
#optimizer="adam" менно так модель обновляется на основе данных, которые она видит, и ее функции потерь.
#metrics используется для мониторинга этапов обучения и тестирования
model.fit(train_images,train_labels,epochs=10)
model.predict(test_images)[0]
test_labels[0]
# train_images и train_labels представляют собой обучающий набор — данные, которые модель использует для обучения.

#Задача 1(это рыбка)
x=[[3],[0],[-2],[-5],[-7],[-8],[-7],[-8],[-7],[-5],[-1],[0],[2],[3],[5],[7],[5],[3],[2],[-3],[-4]]
y=[[3],[3],[2],[2],[4],[3],[1],[-1],[-2],[0],[-2],[-4],[-4],[-2],[-2],[0],[2],[3],[4],[4],[2]]

import matplotlib.pyplot as plt

plt.figure(figsize=(20,20), dpi=50)
plt.plot(x, y, label='уравнение', linewidth='4')
plt.grid(True)
plt.show()